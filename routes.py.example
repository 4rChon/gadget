from gadget.messages import Address, simple_formatter, duplex #useful imports

@simple_formatter #use default_format automatically
def irc_formatter(context): 
    if context["protocol"].PROTOCOL_NAME == "IRC":
        context["body"] = "<#%s> %s: %s" % (context.get("source").split("#")[1], #do the formatting
                                            context.get("name"),
                                            context.get("body"))
        
        return True #tell the decorator we've done all necessary formatting

def skype_formatter(context): #another formatter
    context["body"] = "%s: %s" % (context.get("name"), context.get("body"))
    
    return True

ROUTING_TABLE = {
    "IRC": { #protocol name
        "globalFormatter": irc_formatter, #formatting function to use for global channels
        "globals": [ #list of channels that receive global messages
            "localhost:6667#channel", #this corresponds to the source value in the message context
                                      #it is protocol specific
            Address("Skype", "#echo123/$d5740b91fb44464c"), #Address objects are ok too
        ],
        "routes": { #specific routes
            "localhost:6667#otherchannel": [ #message source, can be a string or Address
                Address("IRC", "otherhost:6667#remotechannel"), #destinations
                #Address format is Address("protocol", "source", formatting_function)
                #the formatting function is optional
                #it may also contain additional keys for use elsewhere (e.g. plugins)
            ],
        },
    },
}

#this function can be used to easily establish two-way communication between to channels
#without making them globals or writing the routes manually
duplex(Address("IRC", "localhost:6667#bridge", skype_formatter),
       Address("Skype", "#echo123/$ed1d190e410d152a", skype_formatter))
